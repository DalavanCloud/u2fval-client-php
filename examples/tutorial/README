== U2FVAL Tutorial
This tutorial will show an example of how to add U2F capability to an existing
username/password based site. To follow along, start by cloning the repository
and checking out the first tutorial git tag: tutorial-1. At each step check out
the contents of this README and take a look at the source code changes from the
previous step by running:

  git diff HEAD~1

Once ready, move on to the next step:

  git checkout tutorial-N

...where N is replaced by the step number, 1-5.

=== Requirements
You will need to have installed the u2fval-client-php library as described in
the main README. You will also need a web server with PHP support, accessible
using a real domain name. You can use the hosts file for this. The reason this
is needed is that the browser won't allow U2F actions performed on an invalid
Application ID. Lastly, you will need to set up an application on a U2FVAL
server with the proper AppID, and enter those credentials in the config.php
file in the examples directory.

=== Starting point
To start out, there is a basic site which accepts username and password for
authentication. You can try it out by going to index.php. The usernames and
passwords are hardcoded. The starting point for the site is index.php, which
provides a form for logging in, taking a username and password. These are sent
to authenticate.php which validate them, and if successful, forwards the user
to welcome.php. Try it out for yourself, then move on to the next step:

  git checkout tutorial-2

=== U2F Device management
The next step is to allow users to register new U2F devices. The user needs to
be able to register new devices, list registered devices, and unregister
devices.

==== Listing devices
We've added a devices.php page which just lists devices. Take a look at the
source code. We've also added a link from the welcome.php page to it so that
it can be navigated to. It doesn't do much as of now, but we'll change that
soon. When ready, move on to the next step:

  git checkout tutorial-3

==== Registering devices
We've now added a register-device.php page for registering a new U2F device.
The page calls the U2FVAL server to create a new U2F device registration,
passes the data to the browsers U2F JavaScript API, and then passes the result
back to the server. Test it out by registering a U2F device. When ready:

  git checkout tutorial-4

==== Unregistering devices
Since the user can register a device, it makes sense to be able to unregister
it as well. We've added unregister-device.php for that purpose, and slightly
altered devices.php to use it. Try unregistering the U2F device that you
registered in the last step. We're almost done, go on to the last step:

  git checkout tutorial-5

=== U2F Authentication
Now that we've got device management out of the way, we need to implement the
actual U2F authentication as part of the login flow. We do this by modifying
authenticate.php to check for registered U2F devices, and require U2F
authentication for those who have it. Go ahead and try loggin in, registering
a U2F device, then logging out and back in again. This time you will need to
authenticate using the registered U2F device.

=== The End
That's it! That's all there is to it. The U2FVAL server keeps track of our
users and their devices, and provides us with everything we need to give our
users a much more secure authentication.
